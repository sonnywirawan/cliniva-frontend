"use strict";
(self["webpackChunkcliniva"] = self["webpackChunkcliniva"] || []).push([["default-node_modules_ngx-material-file-input_fesm2015_ngx-material-file-input_mjs"],{

/***/ 37410:
/*!***********************************************************************************!*\
  !*** ./node_modules/ngx-material-file-input/fesm2015/ngx-material-file-input.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ByteFormatPipe": () => (/* binding */ ByteFormatPipe),
/* harmony export */   "FileInput": () => (/* binding */ FileInput),
/* harmony export */   "FileInputComponent": () => (/* binding */ FileInputComponent),
/* harmony export */   "FileValidator": () => (/* binding */ FileValidator),
/* harmony export */   "MaterialFileInputModule": () => (/* binding */ MaterialFileInputModule),
/* harmony export */   "NGX_MAT_FILE_INPUT_CONFIG": () => (/* binding */ NGX_MAT_FILE_INPUT_CONFIG)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 3184);
/* harmony import */ var _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/a11y */ 84128);
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/form-field */ 44770);
/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/cdk/coercion */ 76484);
/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/material/core */ 88133);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/forms */ 90587);









/**
 * The files to be uploaded
 */

class FileInput {
  constructor(_files, delimiter = ', ') {
    this._files = _files;
    this.delimiter = delimiter;
    this._fileNames = (this._files || []).map(f => f.name).join(delimiter);
  }

  get files() {
    return this._files || [];
  }

  get fileNames() {
    return this._fileNames;
  }

} // Boilerplate for applying mixins to FileInput

/** @docs-private */


class FileInputBase {
  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
    this._parentForm = _parentForm;
    this._parentFormGroup = _parentFormGroup;
    this.ngControl = ngControl;
  }

}
/**
 * Allows to use a custom ErrorStateMatcher with the file-input component
 */


const FileInputMixinBase = (0,_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.mixinErrorState)(FileInputBase);

class FileInputComponent extends FileInputMixinBase {
  /**
   * @see https://angular.io/api/forms/ControlValueAccessor
   */
  constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
    this.fm = fm;
    this._elementRef = _elementRef;
    this._renderer = _renderer;
    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
    this.ngControl = ngControl;
    this._parentForm = _parentForm;
    this._parentFormGroup = _parentFormGroup;
    this.focused = false;
    this.controlType = 'file-input';
    this.autofilled = false;
    this._required = false;
    this.accept = null;
    this.id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;
    this.describedBy = '';

    this._onChange = _ => {};

    this._onTouched = () => {};

    if (this.ngControl != null) {
      this.ngControl.valueAccessor = this;
    }

    fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {
      this.focused = !!origin;
      this.stateChanges.next();
    });
  }

  setDescribedByIds(ids) {
    this.describedBy = ids.join(' ');
  }

  get value() {
    return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
  }

  set value(fileInput) {
    if (fileInput) {
      this.writeValue(fileInput);
      this.stateChanges.next();
    }
  }

  get multiple() {
    return this._multiple;
  }

  set multiple(value) {
    this._multiple = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(value);
    this.stateChanges.next();
  }

  get placeholder() {
    return this._placeholder;
  }

  set placeholder(plh) {
    this._placeholder = plh;
    this.stateChanges.next();
  }
  /**
   * Whether the current input has files
   */


  get empty() {
    return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
  }

  get shouldLabelFloat() {
    return this.focused || !this.empty || this.valuePlaceholder !== undefined;
  }

  get required() {
    return this._required;
  }

  set required(req) {
    this._required = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(req);
    this.stateChanges.next();
  }

  get isDisabled() {
    return this.disabled;
  }

  get disabled() {
    return this._elementRef.nativeElement.disabled;
  }

  set disabled(dis) {
    this.setDisabledState((0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(dis));
    this.stateChanges.next();
  }

  onContainerClick(event) {
    if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {
      this._elementRef.nativeElement.querySelector('input').focus();

      this.focused = true;
      this.open();
    }
  }

  get fileNames() {
    return this.value ? this.value.fileNames : this.valuePlaceholder;
  }

  writeValue(obj) {
    this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
  }

  registerOnChange(fn) {
    this._onChange = fn;
  }

  registerOnTouched(fn) {
    this._onTouched = fn;
  }
  /**
   * Remove all files from the file input component
   * @param [event] optional event that may have triggered the clear action
   */


  clear(event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }

    this.value = new FileInput([]);
    this._elementRef.nativeElement.querySelector('input').value = null;

    this._onChange(this.value);
  }

  change(event) {
    const fileList = event.target.files;
    const fileArray = [];

    if (fileList) {
      for (let i = 0; i < fileList.length; i++) {
        fileArray.push(fileList[i]);
      }
    }

    this.value = new FileInput(fileArray);

    this._onChange(this.value);
  }

  blur() {
    this.focused = false;

    this._onTouched();
  }

  setDisabledState(isDisabled) {
    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
  }

  ngOnInit() {
    this.multiple = (0,_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_1__.coerceBooleanProperty)(this.multiple);
  }

  open() {
    if (!this.disabled) {
      this._elementRef.nativeElement.querySelector('input').click();
    }
  }

  ngOnDestroy() {
    this.stateChanges.complete();
    this.fm.stopMonitoring(this._elementRef.nativeElement);
  }

  ngDoCheck() {
    if (this.ngControl) {
      // We need to re-evaluate this on every change detection cycle, because there are some
      // error triggers that we can't subscribe to (e.g. parent form submissions). This means
      // that whatever logic is in here has to be super lean or we risk destroying the performance.
      this.updateErrorState();
    }
  }

}

FileInputComponent.nextId = 0;

FileInputComponent.ɵfac = function FileInputComponent_Factory(t) {
  return new (t || FileInputComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_material_core__WEBPACK_IMPORTED_MODULE_0__.ErrorStateMatcher), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControl, 10), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm, 8), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormGroupDirective, 8));
};

FileInputComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: FileInputComponent,
  selectors: [["ngx-mat-file-input"]],
  hostVars: 6,
  hostBindings: function FileInputComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("change", function FileInputComponent_change_HostBindingHandler($event) {
        return ctx.change($event);
      })("focusout", function FileInputComponent_focusout_HostBindingHandler() {
        return ctx.blur();
      });
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵhostProperty"]("id", ctx.id);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("aria-describedby", ctx.describedBy);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵclassProp"]("mat-form-field-should-float", ctx.shouldLabelFloat)("file-input-disabled", ctx.isDisabled);
    }
  },
  inputs: {
    autofilled: "autofilled",
    valuePlaceholder: "valuePlaceholder",
    accept: "accept",
    errorStateMatcher: "errorStateMatcher",
    value: "value",
    multiple: "multiple",
    placeholder: "placeholder",
    required: "required",
    disabled: "disabled"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵProvidersFeature"]([{
    provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__.MatFormFieldControl,
    useExisting: FileInputComponent
  }]), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵInheritDefinitionFeature"]],
  decls: 4,
  vars: 4,
  consts: [["type", "file"], ["input", ""], [1, "filename", 3, "title"]],
  template: function FileInputComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](0, "input", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementStart"](2, "span", 2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtext"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelementEnd"]();
    }

    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵattribute"]("multiple", ctx.multiple ? "" : null)("accept", ctx.accept);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("title", ctx.fileNames);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵtextInterpolate"](ctx.fileNames);
    }
  },
  styles: ["[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](FileInputComponent, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Component,
    args: [{
      selector: 'ngx-mat-file-input',
      providers: [{
        provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_5__.MatFormFieldControl,
        useExisting: FileInputComponent
      }],
      template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\" [title]=\"fileNames\">{{ fileNames }}</span>\n",
      styles: [":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0px;height:0px;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}\n"]
    }]
  }], function () {
    return [{
      type: _angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef
    }, {
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2
    }, {
      type: _angular_material_core__WEBPACK_IMPORTED_MODULE_0__.ErrorStateMatcher
    }, {
      type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgControl,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Self
      }]
    }, {
      type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.NgForm,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
      }]
    }, {
      type: _angular_forms__WEBPACK_IMPORTED_MODULE_4__.FormGroupDirective,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
      }]
    }];
  }, {
    autofilled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    valuePlaceholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    accept: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    errorStateMatcher: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    id: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostBinding
    }],
    describedBy: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostBinding,
      args: ['attr.aria-describedby']
    }],
    value: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    multiple: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    placeholder: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    shouldLabelFloat: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostBinding,
      args: ['class.mat-form-field-should-float']
    }],
    required: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    isDisabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostBinding,
      args: ['class.file-input-disabled']
    }],
    disabled: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Input
    }],
    change: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostListener,
      args: ['change', ['$event']]
    }],
    blur: [{
      type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.HostListener,
      args: ['focusout']
    }]
  });
})();
/**
 * Optional token to provide custom configuration to the module
 */


const NGX_MAT_FILE_INPUT_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_2__.InjectionToken('ngx-mat-file-input.config');

class ByteFormatPipe {
  constructor(config) {
    this.config = config;
    this.unit = config ? config.sizeUnit : 'Byte';
  }

  transform(value, args) {
    if (parseInt(value, 10) >= 0) {
      value = this.formatBytes(+value, +args);
    }

    return value;
  }

  formatBytes(bytes, decimals) {
    if (bytes === 0) {
      return '0 ' + this.unit;
    }

    const B = this.unit.charAt(0);
    const k = 1024;
    const dm = decimals || 2;
    const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }

}

ByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) {
  return new (t || ByteFormatPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](NGX_MAT_FILE_INPUT_CONFIG, 24));
};

ByteFormatPipe.ɵpipe = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefinePipe"]({
  name: "byteFormat",
  type: ByteFormatPipe,
  pure: true
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](ByteFormatPipe, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Pipe,
    args: [{
      name: 'byteFormat'
    }]
  }], function () {
    return [{
      type: undefined,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Optional
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.Inject,
        args: [NGX_MAT_FILE_INPUT_CONFIG]
      }]
    }];
  }, null);
})();

class MaterialFileInputModule {}

MaterialFileInputModule.ɵfac = function MaterialFileInputModule_Factory(t) {
  return new (t || MaterialFileInputModule)();
};

MaterialFileInputModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
  type: MaterialFileInputModule
});
MaterialFileInputModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
  providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor]
});

(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](MaterialFileInputModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_2__.NgModule,
    args: [{
      declarations: [FileInputComponent, ByteFormatPipe],
      providers: [_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_3__.FocusMonitor],
      exports: [FileInputComponent, ByteFormatPipe]
    }]
  }], null, null);
})();

class FileValidator {
  /**
   * Function to control content of files
   *
   * @param bytes max number of bytes allowed
   *
   * @returns
   */
  static maxContentSize(bytes) {
    return control => {
      const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;
      const condition = bytes >= size;
      return condition ? null : {
        maxContentSize: {
          actualSize: size,
          maxSize: bytes
        }
      };
    };
  }

} // Module

/**
 * Generated bundle index. Do not edit.
 */




/***/ })

}]);
//# sourceMappingURL=default-node_modules_ngx-material-file-input_fesm2015_ngx-material-file-input_mjs.js.map