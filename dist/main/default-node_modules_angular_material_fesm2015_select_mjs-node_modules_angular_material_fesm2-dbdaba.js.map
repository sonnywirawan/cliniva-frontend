{"version":3,"file":"default-node_modules_angular_material_fesm2015_select_mjs-node_modules_angular_material_fesm2-dbdaba.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2015/select.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n            this.dismiss();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span class=\\\"mat-simple-snack-bar-content\\\">{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}.mat-simple-snack-bar-content{overflow:hidden;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // It's common for snack bars to be opened by random outside calls like HTTP requests or\n        // errors. Run inside the NgZone to ensure that it functions correctly.\n        this._ngZone.run(() => {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            // Mark this element with an 'exit' attribute to indicate that the snackbar has\n            // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n            // test harness.\n            this._elementRef.nativeElement.setAttribute('mat-exit', '');\n            // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n            // long enough to visually read it either, so clear the timeout for announcing.\n            clearTimeout(this._announceTimeoutId);\n        });\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._onExit.next();\n                this._onExit.complete();\n            });\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\nclass _MatSnackBarBase {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\n_MatSnackBarBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: _MatSnackBarBase, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\n_MatSnackBarBase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSnackBarBase, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: _MatSnackBarBase, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar extends _MatSnackBarBase {\n    constructor(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig) {\n        super(overlay, live, injector, breakpointObserver, parentSnackBar, defaultConfig);\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, _MatSnackBarBase, matSnackBarAnimations };\n"],"names":["i7","Overlay","CdkConnectedOverlay","OverlayModule","i8","CommonModule","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","ActiveDescendantKeyManager","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","i3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","ɵdir","useExisting","type","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","stateChanges","next","required","_d","_required","control","hasValidator","multiple","_selectionModel","ngDevMode","compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_id","ngOnInit","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","labelExpression","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","decorators","MatFormField","panelClass","errorStateMatcher","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","ɵcmp","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatSelectModule","ɵmod","ɵinj","imports","exports","declarations","i1$1","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","Injector","TemplateRef","Injectable","SkipSelf","MatButtonModule","i3$2","Breakpoints","i2$1","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","_onExit","_finishDismiss","dismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","setTimeout","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","onAction","SimpleSnackBar","snackBarRef","action","hasAction","MatButton","NgIf","matSnackBarAnimations","snackBarState","MatSnackBarContainer","_platform","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","run","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","cssClass","classList","add","hasAttached","runOutsideAngular","inertElement","querySelector","liveElement","focusedElement","isBrowser","document","activeElement","HTMLElement","contains","appendChild","Platform","Default","static","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","providedIn","factory","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","_MatSnackBarBase","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","parent","openFromComponent","component","config","_attach","openFromTemplate","message","_config","Object","assign","simpleSnackBarComponent","_attachSnackBarContainer","userInjector","viewContainerRef","injector","create","useValue","containerPortal","snackBarContainerComponent","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","HandsetPortrait","detachments","handsetCssClass","matches","_animateSnackBar","overlayConfig","direction","positionStrategy","position","global","isLeft","isRight","centerHorizontally","BreakpointObserver","ɵprov","MatSnackBar","live","breakpointObserver","parentSnackBar","defaultConfig"],"sourceRoot":"webpack:///"}